{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 Helvetica-BoldOblique;
\f3\fswiss\fcharset0 Helvetica-Bold;\f4\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red45\green45\blue45;
\red0\green0\blue0;\red25\green28\blue31;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c23137\c23137\c23137;
\csgray\c0\c0;\cssrgb\c12941\c14510\c16078;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14860\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
/******************************************************************************\cb1 \
\cb3 *  ASR => 4R2.04                                                                                \cb1 \
\cb3 *******************************************************************************\cb1 \
\cb3 *                                                                                                            \cb1 \
\cb3 *  N\'b0 de Sujet : 2                                                            \cb1 \
\cb3 *                                                                             \cb1 \
\cb3 *******************************************************************************\cb1 \
\cb3 *                                                                             \cb1 \
\cb3 *  Intitul\'e9 : Analyse adresse IP                                              \cb1 \
\cb3 *                                                                             \cb1 \
\cb3 *******************************************************************************\cb1 \
\cb3 *                                                                             \cb1 \
\cb3 *  Nom-pr\'e9nom1 : RIPICEANU Denisa                                             \cb1 \
\cb3 *                                                                             \cb1 \
\cb3 *  Nom-pr\'e9nom2 : DELAGNES Antoine                                             \cb1 \
\cb3 *                                                                             \cb1 \
\cb3 *  Nom-pr\'e9nom3 : TAMBOURA Kerima                                              \cb1 \
\cb3 *                                                                             \cb1 \
\cb3 *  Nom-pr\'e9nom4 : -                                                            \cb1 \
\cb3 *                                                                             \cb1 \
\cb3 *******************************************************************************\cb1 \
\cb3 *                                                                             \cb1 \
\cb3 *  Nom du fichier : README                                                    \cb1 \
\cb3 *                                                                             \cb1 \
\cb3 ******************************************************************************/
\f1 \cf4 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0

\f0 \cf2 \cb5 \kerning1\expnd0\expndtw0 \
Lien du d\'e9p\'f4t GIT : https://gitlab.info.iut-tlse3.fr/rpd3994a/sujet2_ripiceanu_delagnes_tamboura.git\cb1 \
\
Notre \'e9quipe, form\'e9e par RIPICEANU Denisa, TAMBOURA Kerima et DELAGNES Antoine, a choisi de developer le deuxi\'e8me sujet propos\'e9 : Analyse d\'92adresse IP. Notre programme sait reconna\'eetre, \'e0 partir d\'92une adresse IP en format CIDR donn\'e9e en entr\'e9e :\
- l\expnd0\expndtw0\kerning0
e type de l\'92adresseIP (si elle est publique, priv\'e9, localhost, broadcast ou multicast)\
- la classe de l\'92adresse (A, B, C, D ou E)\
- l\'92adresse du r\'e9seau \
- l\'92adresse de l\'92h\'f4te si elle existe.\kerning1\expnd0\expndtw0 \
\
Dans notre dossier il y a quatre fichiers : \'ab\'a0sources.c\'a0\'bb, \'ab\'a0sources.h\'a0\'bb, \'ab\'a0main.c\'a0\'bb et le fichier \'ab\'a0Makefile\'a0\'bb.  \
\
Dans le fichier \'ab\'a0sources.c\'a0\'bb il existe plusieurs fonctions pour manipuler et analyser des adresses IP.\
-\expnd0\expndtw0\kerning0
 int\kerning1\expnd0\expndtw0  
\f2\i\b extraire_masque
\f0\i0\b0  \cb3 \expnd0\expndtw0\kerning0
(const char* adresseIP)\cb1 \kerning1\expnd0\expndtw0 : extrait le masque de sous-r\'e9seau de l'adresse IP fournie en tant que cha\'eene de caract\'e8res.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf2 Cette fonction prend en entr\'e9e une cha\'eene de caract\'e8res repr\'e9sentant l'adresse IP au format CIDR.\
Elle sort un entier repr\'e9sentant la valeur du masque de sous-r\'e9seau extrait de l'adresse IP.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf2 - \expnd0\expndtw0\kerning0
int 
\f2\i\b \kerning1\expnd0\expndtw0 obtenir_classe
\f0\i0\b0  \expnd0\expndtw0\kerning0
(int* champs)\kerning1\expnd0\expndtw0 : d\'e9termine la classe de l'adresse IP en fonction des plages d'octets sp\'e9cifi\'e9es pour chaque classe.\
Cette fonction prend en entr\'e9e un tableau d'entiers repr\'e9sentant les octets de l'adresse IP.\
Elle a en sortie un entier repr\'e9sentant la classe d'adresse IP (CLASSE_A, CLASSE_B, CLASSE_C, CLASSE_D ou CLASSE_E, repr\'e9sent\'e9s par des constantes).\
\
- \expnd0\expndtw0\kerning0
int 
\f2\i\b \kerning1\expnd0\expndtw0 obtenir_type
\f0\i0\b0  \expnd0\expndtw0\kerning0
(int* champs) \kerning1\expnd0\expndtw0 : donne le type d'adresse IP en v\'e9rifiant les plages sp\'e9cifiques pour les adresses publiques, priv\'e9es, localhost, broadcast et multicast.\
Cette fonction prend en entr\'e9e un tableau d'entiers repr\'e9sentant les octets de l'adresse IP.\
Elle donne en sortie un entier repr\'e9sentant le type d'adresse IP (PUBLIC, PRIVE, LOCALHOST, BROADCAST ou MULTICAST, repr\'e9sent\'e9s par de constantes).\
\
-\expnd0\expndtw0\kerning0
 int\kerning1\expnd0\expndtw0  
\f2\i\b verifier_format
\f0\i0\b0  \cb3 \expnd0\expndtw0\kerning0
(const char *adresseIP)\cb1 \kerning1\expnd0\expndtw0 : v\'e9rifie si le format de l'adresse IP est correct, en s'assurant qu'il y a trois points et un slash dans la cha\'eene de caract\'e8res.
\f2\i\b \

\f0\i0\b0 Cette fonction prend en entr\'e9e une cha\'eene de caract\'e8res repr\'e9sentant l'adresse IP \'e0 v\'e9rifier.\
Elle sort in entier (0 ou 1) indiquant si le format de l'adresse IP est valide ou non.\
\
- void 
\f2\i\b extraire_octets
\f0\i0\b0 \expnd0\expndtw0\kerning0
 \cb3 (const char* adresseIP, int* champs, int* masque)
\f3\b \cb1 \kerning1\expnd0\expndtw0  
\f0\b0 : extrait les octets de l'adresse IP et le masque de sous-r\'e9seau de la cha\'eene de caract\'e8res sp\'e9cifi\'e9e.\
Elle prend en entr\'e9e une cha\'eene de caract\'e8res repr\'e9sentant l'adresse IP au format CIDR, un tableau d'entiers pour stocker les octets de l'adresse IP et un pointeur d'entier pour stocker le masque de sous-r\'e9seau.\
Elle n\'92a pas de sortie. Les octets de l'adresse IP et le masque sont stock\'e9s dans les tableaux et la variable point\'e9e respectivement.\
\
- \expnd0\expndtw0\kerning0
int 
\f2\i\b \kerning1\expnd0\expndtw0 verifier_valeurs_octets
\f0\i0\b0  \cb3 \expnd0\expndtw0\kerning0
(int* champs)\cb1 \kerning1\expnd0\expndtw0 : v\'e9rifie si les valeurs des octets de l'adresse IP sont comprises entre 0 et 255, ce qui correspond \'e0 la plage valide pour chaque octet d'une adresse IP.\
Elle prend en entr\'e9e un tableau d'entiers repr\'e9sentant les octets de l'adresse IP.\
Elle sort un entier (0 ou 1) indiquant si les valeurs des octets sont valides ou non.\
\
- \expnd0\expndtw0\kerning0
int 
\f2\i\b \kerning1\expnd0\expndtw0 verifier_valeur_masque
\f0\i0\b0  \cb3 \expnd0\expndtw0\kerning0
(int masque)\cb1 \kerning1\expnd0\expndtw0 : v\'e9rifie si le masque de sous-r\'e9seau est valide, c'est-\'e0-dire s'il est compris entre 0 et 32.\
Elle prend en entr\'e9e un entier repr\'e9sentant le masque de sous-r\'e9seau.\
Elle sort un entier (0 ou 1) indiquant si le masque est valide ou non.\
\
- void 
\f2\i\b trouver_adresse_reseau
\f0\i0\b0  (int* champs, int nb_masque, int* adresse_reseau) : trouver l'adresse r\'e9seau correspondante \'e0 une adresse IP donn\'e9e et \'e0 un masque de r\'e9seau sp\'e9cifi\'e9. L'adresse r\'e9seau est calcul\'e9e en effectuant un "ET logique" bit \'e0 bit entre l'adresse IP et le masque de r\'e9seau. Le r\'e9sultat est ensuite stock\'e9 dans le tableau de caract\'e8res \'ab\'a0adresseReseau\'a0\'bb.\
Elle prend en entr\'e9e une cha\'eene de caract\'e8res repr\'e9sentant l'adresse IP, une cha\'eene de caract\'e8res repr\'e9sentant le masque de r\'e9seau, un tableau de caract\'e8res pour stocker l'adresse r\'e9seau.\
Elle n\'92a aucune sortie.\
\
- void 
\f2\i\b trouver_adresse_hote
\f0\i0\b0  (const char* adresseIP, const char* masqueReseau, char* adresseHote): trouve l'adresse h\'f4te correspondante \'e0 une adresse IP donn\'e9e et \'e0 un masque de r\'e9seau sp\'e9cifi\'e9. L'adresse h\'f4te est calcul\'e9e en effectuant un "ET logique invers\'e9" bit \'e0 bit entre l'adresse IP et le masque de r\'e9seau (en inversant les bits du masque de r\'e9seau). Le r\'e9sultat est ensuite stock\'e9 dans le tableau de caract\'e8res "adresseHote".\
Cette fonction prend en entr\'e9e une cha\'eene de caract\'e8res repr\'e9sentant l'adresse IP, une cha\'eene de caract\'e8res repr\'e9sentant le masque de r\'e9seau, un tableau de caract\'e8res pour stocker l'adresse h\'f4te.\
Elle n\'92a aucune sortie.\
\
\cb5 - void 
\f2\i\b enregistrer_resultats
\f0\i0\b0  \expnd0\expndtw0\kerning0
(char* adresseIP, char* nomFichier)\kerning1\expnd0\expndtw0 : enregistre les r\'e9sultats de la fonction 
\f2\i\b afficher_resultats
\f0\i0\b0  dans un fichier sp\'e9cifi\'e9.\cb1 \
Cette fonction prend en entr\'e9e un pointeur vers une cha\'eene de caract\'e8res repr\'e9sentant l'adresse IP et un pointeur vers une cha\'eene de caract\'e8res repr\'e9sentant le nom du fichier dans lequel enregistrer les r\'e9sultats.\
Elle n\'92a aucune sortie.\
\
On sait que les consignes du projet ont \'e9t\'e9 de ne pas faire des affichages au sein des fonctions, mais pour optimiser notre programme, on a d\'e9icid\'e9 de mettre en place ces cinq fonctions pour afficher les informations sur l\'92adresse IP : \
- void 
\f2\i\b afficher_type_adresse
\f0\i0\b0  (int type) : affiche le type d'adresse (public, priv\'e9, localhost, diffusion, multicast).\
- void 
\f2\i\b afficher_classe_adresse
\f0\i0\b0  (int classe) : affiche la classe d'adresse (A, B, C, D, E).\
- void 
\f2\i\b afficher_adresse_hote
\f0\i0\b0  (\cb3 \expnd0\expndtw0\kerning0
const int adresse_hote[])\cb1 \kerning1\expnd0\expndtw0 : v\'e9rifie si tous les octets de l'adresse de l'h\'f4te sont \'e0 z\'e9ro ou non, et en fonction de cela, elle affiche l'adresse de l'h\'f4te ou un message indiquant l'absence d'adresse d'h\'f4te\
- void
\f2\i\b  afficher_adresse_reseau 
\f0\i0\b0 (\cb3 \expnd0\expndtw0\kerning0
const int adresse_reseau[])\cb1 \kerning1\expnd0\expndtw0  : affiche l'adresse \cb3 \expnd0\expndtw0\kerning0
du r\'e9seau\cb1 \kerning1\expnd0\expndtw0 .\cb3 \expnd0\expndtw0\kerning0
\
\cb1 \kerning1\expnd0\expndtw0 - void
\f2\i\b  afficher_resultats 
\f0\i0\b0 \cb3 \expnd0\expndtw0\kerning0
(const char* adresseIP)\cb1 \kerning1\expnd0\expndtw0  : \cb3 \expnd0\expndtw0\kerning0
Affiche les r\'e9sultats (type, classe, adresse du r\'e9seau, adresse de l'h\'f4te) \'e0 partir de l'adresse IP\cf4 \cb1 \
\cf2 \kerning1\expnd0\expndtw0 \
Le fichier \'ab\'a0sources.h\'a0\'bb contient les signatures de ces fonctions. \
\
Le fichier \'ab\'a0main.c\'a0\'bb contient la fonction 
\f4\i main
\f0\i0 , qui est le point d'entr\'e9e du programme, o\'f9 l'utilisateur est invit\'e9 \'e0 entrer une adresse IP et o\'f9 les fonctions de \'ab\'a0sources.c\'a0\'bb sont utilis\'e9es pour afficher des informations sur cette adresse IP.\
\
Notre dossier contient en plus un fichier \'ab\'a0Makefile\'a0\'bb \cf6 \cb3 \expnd0\expndtw0\kerning0
assurant l'automatisation des \'e9tapes de compilation.\cf2 \cb1 \kerning1\expnd0\expndtw0 \
\
\
\
}